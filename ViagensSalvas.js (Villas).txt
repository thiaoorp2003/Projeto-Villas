ViagensSalvas.js (Villas)

import React, { useEffect, useState } from 'react';
import { StyleSheet, Text, View, ActivityIndicator, FlatList, TouchableOpacity, Alert, TextInput, Image } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function ViagensSalvas() {
  const [viagens, setViagens] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [adminPassword, setAdminPassword] = useState('');
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);
  const [showLogo, setShowLogo] = useState(false); // Estado para controlar a exibição da imagem

  useEffect(() => {
    const checkAdminLogin = async () => {
      try {
        const adminPass = await AsyncStorage.getItem('adminPassword');
        if (adminPass) {
          setAdminPassword(adminPass);
        }
        setIsLoading(false);
      } catch (error) {
        console.log('Erro ao carregar a senha de administrador:', error);
        setIsLoading(false);
      }
    };

    checkAdminLogin();
  }, []);

  const handleAdminLogin = () => {
    if (adminPassword && adminPassword === 'Villas123') {
      setIsAdminLoggedIn(true);
      fetchViagens();
    } else {
      Alert.alert('Erro', 'Senha de administrador incorreta.');
    }
  };

  const fetchViagens = async () => {
    try {
      const viagensData = await AsyncStorage.getItem('viagens');
      if (viagensData) {
        setViagens(JSON.parse(viagensData));
      }
    } catch (error) {
      console.log('Erro ao carregar os dados:', error);
    }
  };

  const handleDelete = async (index) => {
    try {
      const updatedViagens = [...viagens];
      updatedViagens.splice(index, 1);
      await AsyncStorage.setItem('viagens', JSON.stringify(updatedViagens));
      setViagens(updatedViagens);
      Alert.alert('Sucesso', 'Viagem removida com sucesso.');
    } catch (error) {
      Alert.alert('Erro', 'Erro ao remover a viagem.');
      console.log('Erro ao remover a viagem:', error);
    }
  };

  if (isLoading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#FF0000" />
      </View>
    );
  }

  const renderItem = ({ item, index }) => (
    <View style={styles.item}>
      <Text style={styles.text}>Cadastro Funcionário: {item.cadastrofuncionario}</Text>
      <Text style={styles.text}>Veículo: {item.carInfo}</Text>
      <Text style={styles.text}>Data: {item.date}</Text>
      <Text style={styles.text}>Hora de Chegada: {item.hour1}</Text>
      <Text style={styles.text}>Hora de Saída: {item.hour}</Text>
      <Text style={styles.text}>Destino: {item.destino}</Text>
      <View style={styles.separator} />
      <TouchableOpacity style={styles.deleteButton} onPress={() => handleDelete(index)}>
        <Text style={styles.deleteButtonText}>Excluir</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <View style={styles.container}>
      {isAdminLoggedIn ? (
        <>
          <Text style={styles.heading}>Viagens Salvas</Text>
          <FlatList
            data={viagens}
            renderItem={renderItem}
            keyExtractor={(item, index) => index.toString()}
          />
          {showLogo && <Image source={require('../assets/logo.png')} style={styles.logo} />}
        </>
      ) : (
        <>
          <TextInput
            placeholder="Digite a senha de administrador"
            onChangeText={(text) => setAdminPassword(text)}
            value={adminPassword}
            secureTextEntry={true}
            style={styles.input}
          />
          <TouchableOpacity style={styles.button} onPress={handleAdminLogin}>
            <Text style={styles.buttonText}>Entrar como Administrador</Text>
          </TouchableOpacity>
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 300,
    height: 100,
    marginBottom: 40,
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  item: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  text: {
    fontSize: 18,
    marginBottom: 5,
  },
  separator: {
    height: 1,
    backgroundColor: '#ccc',
    marginVertical: 5,
  },
  deleteButton: {
    backgroundColor: '#FF0000',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 5,
    alignSelf: 'flex-end',
  },
  deleteButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },
  input: {
    width: '80%',
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    paddingHorizontal: 10,
    marginBottom: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
  },
  button: {
    backgroundColor: '#FF0000',
    paddingVertical: 15,
    paddingHorizontal: 25,
    borderRadius: 8,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
